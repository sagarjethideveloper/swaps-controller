{"version":3,"file":"swapsUtil.js","sourceRoot":"","sources":["../src/swapsUtil.ts"],"names":[],"mappings":"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","sourcesContent":["import { Transaction, util } from '@metamask/controllers';\nimport { AbortSignal } from 'abort-controller';\nimport BigNumber from 'bignumber.js';\nimport { addHexPrefix } from 'ethereumjs-util';\nimport {\n  APIAggregatorMetadata,\n  SwapsAsset,\n  SwapsToken,\n  APIType,\n  Quote,\n  APIFetchQuotesParams,\n  QuoteValues,\n  TransactionReceipt,\n} from './swapsInterfaces';\n\nconst {\n  handleFetch,\n  timeoutFetch,\n  BNToHex,\n  query,\n  normalizeTransaction,\n} = util;\n\nexport const ETH_CHAIN_ID = '1';\nexport const BSC_CHAIN_ID = '56';\nexport const SWAPS_TESTNET_CHAIN_ID = '1337';\n\nexport const ETH_SWAPS_CONTRACT_ADDRESS =\n  '0x881d40237659c251811cec9c364ef91dc08d300c';\nexport const BSC_SWAPS_CONTRACT_ADDRESS =\n  '0x1a1ec25dc08e98e5e93f1104b5e5cdd298707d31';\n\nexport const SWAPS_CONTRACT_ADDRESSES: { [key: string]: string } = {\n  [ETH_CHAIN_ID]: ETH_SWAPS_CONTRACT_ADDRESS,\n  [SWAPS_TESTNET_CHAIN_ID]: ETH_SWAPS_CONTRACT_ADDRESS,\n  [BSC_CHAIN_ID]: BSC_SWAPS_CONTRACT_ADDRESS,\n};\n\nexport const NATIVE_SWAPS_TOKEN_ADDRESS =\n  '0x0000000000000000000000000000000000000000';\nconst TOKEN_TRANSFER_LOG_TOPIC_HASH =\n  '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef';\n\nexport const ETH_SWAPS_TOKEN_OBJECT: SwapsToken = {\n  symbol: 'ETH',\n  name: 'Ether',\n  address: NATIVE_SWAPS_TOKEN_ADDRESS,\n  decimals: 18,\n};\n\nexport const BSC_SWAPS_TOKEN_OBJECT: SwapsToken = {\n  symbol: 'BNB',\n  name: 'Binance Coin',\n  address: NATIVE_SWAPS_TOKEN_ADDRESS,\n  decimals: 18,\n};\n\nconst SWAPS_NATIVE_TOKEN_OBJECTS: { [key: string]: SwapsToken } = {\n  [ETH_CHAIN_ID]: ETH_SWAPS_TOKEN_OBJECT,\n  [SWAPS_TESTNET_CHAIN_ID]: ETH_SWAPS_TOKEN_OBJECT,\n  [BSC_CHAIN_ID]: BSC_SWAPS_TOKEN_OBJECT,\n};\n\nconst API_BASE_HOST_URL: { [key: string]: string } = {\n  [ETH_CHAIN_ID]: 'https://api.metaswap.codefi.network',\n  [SWAPS_TESTNET_CHAIN_ID]: 'https://metaswap-api.airswap-dev.codefi.network',\n  [BSC_CHAIN_ID]: 'https://bsc-api.metaswap.codefi.network',\n};\n\nexport const DEFAULT_ERC20_APPROVE_GAS = '0x1d4c0';\n\n// The MAX_GAS_LIMIT is a number that is higher than the maximum gas costs we have observed on any aggregator\nconst MAX_GAS_LIMIT = 2500000;\n\nexport enum SwapsError {\n  QUOTES_EXPIRED_ERROR = 'quotes-expired',\n  SWAP_FAILED_ERROR = 'swap-failed-error',\n  ERROR_FETCHING_QUOTES = 'error-fetching-quotes',\n  QUOTES_NOT_AVAILABLE_ERROR = 'quotes-not-available',\n  OFFLINE_FOR_MAINTENANCE = 'offline-for-maintenance',\n  SWAPS_FETCH_ORDER_CONFLICT = 'swaps-fetch-order-conflict',\n  SWAPS_GAS_PRICE_ESTIMATION = 'swaps-gas-price-estimation',\n  SWAPS_ALLOWANCE_TIMEOUT = 'swaps-allowance-timeout',\n  SWAPS_ALLOWANCE_ERROR = 'swaps-allowance-error',\n}\n\n// Functions\n\nexport function getNativeSwapsToken(chainId: string): SwapsToken {\n  return SWAPS_NATIVE_TOKEN_OBJECTS[chainId];\n}\n\nexport function getSwapsContractAddress(chainId: string): string {\n  return SWAPS_CONTRACT_ADDRESSES[chainId];\n}\n\nexport const getBaseApiURL = function (type: APIType, chainId: string): string {\n  const hostURL = API_BASE_HOST_URL[chainId];\n  switch (type) {\n    case APIType.TRADES:\n      return `${hostURL}/trades`;\n    case APIType.TOKENS:\n      return `${hostURL}/tokens`;\n    case APIType.TOP_ASSETS:\n      return `${hostURL}/topAssets`;\n    case APIType.FEATURE_FLAG:\n      return `${hostURL}/featureFlag`;\n    case APIType.AGGREGATOR_METADATA:\n      return `${hostURL}/aggregatorMetadata`;\n    case APIType.GAS_PRICES:\n      return `${hostURL}/gasPrices`;\n    default:\n      throw new Error('getBaseApiURL requires an api call type');\n  }\n};\n\nexport async function fetchTradesInfo(\n  {\n    slippage,\n    sourceToken,\n    sourceAmount,\n    destinationToken,\n    walletAddress,\n    exchangeList,\n  }: APIFetchQuotesParams,\n  abortSignal: AbortSignal | null,\n  chainId: string,\n  clientId?: string,\n): Promise<{ [key: string]: Quote }> {\n  const urlParams: APIFetchQuotesParams = {\n    destinationToken,\n    sourceToken,\n    sourceAmount,\n    slippage,\n    timeout: 10000,\n    walletAddress,\n  };\n\n  if (exchangeList) {\n    urlParams.exchangeList = exchangeList;\n  }\n\n  if (clientId) {\n    urlParams.clientId = clientId;\n  }\n\n  const tradeURL = `${getBaseApiURL(\n    APIType.TRADES,\n    chainId,\n  )}?${new URLSearchParams(urlParams as Record<any, any>).toString()}`;\n\n  const tradesResponse = await timeoutFetch(\n    tradeURL,\n    { method: 'GET', signal: abortSignal },\n    15000,\n  );\n  const trades = (await tradesResponse.json()) as Quote[];\n  const newQuotes = trades.reduce(\n    (aggIdTradeMap: { [key: string]: Quote }, quote: Quote) => {\n      if (\n        !quote.error &&\n        quote.trade &&\n        quote.trade?.to?.toLowerCase() === getSwapsContractAddress(chainId)\n      ) {\n        const constructedTrade = constructTxParams({\n          to: quote.trade.to,\n          from: quote.trade.from,\n          data: quote.trade.data,\n          amount: BNToHex(new BigNumber(quote.trade.value)),\n          gas: BNToHex(quote.maxGas),\n        });\n\n        return {\n          ...aggIdTradeMap,\n          [quote.aggregator]: {\n            ...quote,\n            slippage,\n            trade: constructedTrade,\n          },\n        };\n      }\n\n      return aggIdTradeMap;\n    },\n    {},\n  );\n\n  return newQuotes;\n}\n\nexport async function fetchTokens(chainId: string): Promise<SwapsToken[]> {\n  const tokenUrl = getBaseApiURL(APIType.TOKENS, chainId);\n  const tokens: SwapsToken[] = await handleFetch(tokenUrl, { method: 'GET' });\n  const filteredTokens = tokens.filter((token) => {\n    return token.address !== NATIVE_SWAPS_TOKEN_ADDRESS;\n  });\n  filteredTokens.push(getNativeSwapsToken(chainId));\n  return filteredTokens;\n}\n\nexport async function fetchAggregatorMetadata(chainId: string) {\n  const aggregatorMetadataUrl = getBaseApiURL(\n    APIType.AGGREGATOR_METADATA,\n    chainId,\n  );\n  const aggregators: {\n    [key: string]: APIAggregatorMetadata;\n  } = await handleFetch(aggregatorMetadataUrl, {\n    method: 'GET',\n  });\n  return aggregators;\n}\n\nexport async function fetchTopAssets(chainId: string): Promise<SwapsAsset[]> {\n  const topAssetsUrl = getBaseApiURL(APIType.TOP_ASSETS, chainId);\n  const response: SwapsAsset[] = await handleFetch(topAssetsUrl, {\n    method: 'GET',\n  });\n  return response;\n}\n\nexport async function fetchSwapsFeatureLiveness(\n  chainId: string,\n): Promise<boolean> {\n  try {\n    const status = await handleFetch(\n      getBaseApiURL(APIType.FEATURE_FLAG, chainId),\n      { method: 'GET' },\n    );\n    return status;\n  } catch (err) {\n    return false;\n  }\n}\n\nexport async function fetchGasPrices(\n  chainId: string,\n): Promise<{\n  safeGasPrice: string;\n  proposedGasPrice: string;\n  fastGasPrice: string;\n}> {\n  const { SafeGasPrice, ProposeGasPrice, FastGasPrice } = await handleFetch(\n    getBaseApiURL(APIType.GAS_PRICES, chainId),\n    {\n      method: 'GET',\n    },\n  );\n  return {\n    safeGasPrice: new BigNumber(SafeGasPrice).times(1000000000).toString(16),\n    proposedGasPrice: new BigNumber(ProposeGasPrice)\n      .times(1000000000)\n      .toString(16),\n    fastGasPrice: new BigNumber(FastGasPrice).times(1000000000).toString(16),\n  };\n}\n\nexport function calculateGasEstimateWithRefund(\n  maxGas: number | null,\n  estimatedRefund: number | null,\n  estimatedGas: string | null,\n): BigNumber {\n  const estimated = estimatedGas && addHexPrefix(estimatedGas);\n  const maxGasMinusRefund = new BigNumber(maxGas || MAX_GAS_LIMIT, 10).minus(\n    estimatedRefund || 0,\n  );\n  const estimatedGasBN = new BigNumber(estimated || '0x0');\n  const gasEstimateWithRefund = maxGasMinusRefund.lt(estimatedGasBN)\n    ? maxGasMinusRefund\n    : estimatedGasBN;\n  return gasEstimateWithRefund;\n}\n\n/**\n * Calculates token received from a transaction receipt together with an approval transaction receipt\n *\n * @param receipt - Swap transaction receipt\n * @param approvalReceipt - Approval transaction receipt needed for swaps if any\n * @param transaction - Swap transaction object\n * @param approvalTransaction - Approval transaction object needed for swaps if any\n * @param destinationToken - Destination token object\n * @param previousBalance - Previous swap ETH balance\n * @param postBalance - Post swap ETH balance\n * @returns - Tokens received in hex minimal unit\n */\nexport function getSwapsTokensReceived(\n  receipt: TransactionReceipt,\n  approvalReceipt: TransactionReceipt | null,\n  transaction: Transaction,\n  approvalTransaction: Transaction,\n  destinationToken: SwapsToken,\n  previousBalance: string,\n  postBalance: string,\n): string | undefined {\n  if (destinationToken.address === NATIVE_SWAPS_TOKEN_ADDRESS) {\n    const approvalTransactionGasCost = new BigNumber(\n      approvalTransaction?.gasPrice || '0x0',\n    ).times(approvalReceipt?.gasUsed || '0x0');\n    const transactionGas = new BigNumber(transaction?.gasPrice || '0x0').times(\n      receipt?.gasUsed || '0x0',\n    );\n    const totalGasCost = transactionGas.plus(approvalTransactionGasCost);\n\n    const previousBalanceMinusGas = new BigNumber(previousBalance).minus(\n      totalGasCost,\n    );\n    const postBalanceMinusGas = new BigNumber(postBalance);\n\n    return postBalanceMinusGas.minus(previousBalanceMinusGas).toString(16);\n  }\n  if (!receipt?.logs || receipt.status === '0x0') {\n    return;\n  }\n\n  const tokenTransferLog = receipt.logs.find(\n    (receiptLog: { topics: string[]; address: string }) => {\n      const isTokenTransfer =\n        receiptLog?.topics[0] === TOKEN_TRANSFER_LOG_TOPIC_HASH;\n      const isTransferFromGivenToken =\n        receiptLog.address === destinationToken.address;\n      const isTransferFromGivenAddress = receiptLog?.topics[2]?.match(\n        transaction.from.slice(2),\n      );\n      return (\n        isTokenTransfer &&\n        isTransferFromGivenToken &&\n        isTransferFromGivenAddress\n      );\n    },\n  );\n  if (!tokenTransferLog) {\n    return;\n  }\n  return tokenTransferLog.data;\n}\n\n/**\n * Calculates the median of a sample of BigNumber values.\n *\n * @param {BigNumber[]} values - A sample of BigNumber values.\n * @returns {BigNumber} The median of the sample.\n */\nexport function getMedian(values: BigNumber[]) {\n  if (!Array.isArray(values) || values.length === 0) {\n    throw new Error('Expected non-empty array param.');\n  }\n  const sorted = [...values].sort((a, b) => a.comparedTo(b));\n\n  if (sorted.length % 2 === 1) {\n    // return middle value\n    return sorted[(sorted.length - 1) / 2];\n  }\n  // return mean of middle two values\n  const upperIndex = sorted.length / 2;\n  return sorted[upperIndex].plus(sorted[upperIndex - 1]).div(2);\n}\n\n/**\n * Calculates the median overallValueOfQuote of a sample of quotes.\n *\n * @param {Array} quotes - A sample of quote objects with overallValueOfQuote, ethFee, metaMaskFeeInEth, and ethValueOfTokens properties\n * @returns {Object} An object with the ethValueOfTokens, ethFee, and metaMaskFeeInEth of the quote with the median overallValueOfQuote\n */\n\nexport function getMedianEthValueQuote(quotes: QuoteValues[]) {\n  if (!Array.isArray(quotes) || quotes.length === 0) {\n    throw new Error('Expected non-empty array param.');\n  }\n\n  quotes.sort((quoteA, quoteB) => {\n    const overallValueOfQuoteA = new BigNumber(quoteA.overallValueOfQuote, 10);\n    const overallValueOfQuoteB = new BigNumber(quoteB.overallValueOfQuote, 10);\n    return overallValueOfQuoteA.comparedTo(overallValueOfQuoteB);\n  });\n\n  if (quotes.length % 2 === 1) {\n    // return middle values\n    const medianOverallValue =\n      quotes[(quotes.length - 1) / 2].overallValueOfQuote;\n    const quotesMatchingMedianQuoteValue = quotes.filter(\n      (quote) => medianOverallValue === quote.overallValueOfQuote,\n    );\n    return meansOfQuotesFeesAndValue(quotesMatchingMedianQuoteValue);\n  }\n\n  // return mean of middle two values\n  const upperIndex = quotes.length / 2;\n  const lowerIndex = upperIndex - 1;\n\n  const overallValueAtUpperIndex = quotes[upperIndex].overallValueOfQuote;\n  const overallValueAtLowerIndex = quotes[lowerIndex].overallValueOfQuote;\n\n  const quotesMatchingUpperIndexValue = quotes.filter(\n    (quote) => overallValueAtUpperIndex === quote.overallValueOfQuote,\n  );\n  const quotesMatchingLowerIndexValue = quotes.filter(\n    (quote) => overallValueAtLowerIndex === quote.overallValueOfQuote,\n  );\n\n  const feesAndValueAtUpperIndex = meansOfQuotesFeesAndValue(\n    quotesMatchingUpperIndexValue,\n  );\n  const feesAndValueAtLowerIndex = meansOfQuotesFeesAndValue(\n    quotesMatchingLowerIndexValue,\n  );\n\n  return {\n    ethFee: new BigNumber(feesAndValueAtUpperIndex.ethFee, 10)\n      .plus(feesAndValueAtLowerIndex.ethFee, 10)\n      .dividedBy(2)\n      .toString(10),\n    metaMaskFeeInEth: new BigNumber(\n      feesAndValueAtUpperIndex.metaMaskFeeInEth,\n      10,\n    )\n      .plus(feesAndValueAtLowerIndex.metaMaskFeeInEth, 10)\n      .dividedBy(2)\n      .toString(10),\n    ethValueOfTokens: new BigNumber(\n      feesAndValueAtUpperIndex.ethValueOfTokens,\n      10,\n    )\n      .plus(feesAndValueAtLowerIndex.ethValueOfTokens, 10)\n      .dividedBy(2)\n      .toString(10),\n  };\n}\n\n/**\n * Calculates the arithmetic mean for each of three properties - ethFee, metaMaskFeeInEth and ethValueOfTokens - across\n * an array of objects containing those properties.\n *\n * @param {Array} quotes - A sample of quote objects with overallValueOfQuote, ethFee, metaMaskFeeInEth and\n * ethValueOfTokens properties\n * @returns {Object} An object with the arithmetic mean each of the ethFee, metaMaskFeeInEth and ethValueOfTokens of\n * the passed quote objects\n */\nfunction meansOfQuotesFeesAndValue(quotes: QuoteValues[]) {\n  const feeAndValueSumsAsBigNumbers = quotes.reduce(\n    (feeAndValueSums, quote) => ({\n      ethFee: feeAndValueSums.ethFee.plus(quote.ethFee, 10),\n      metaMaskFeeInEth: feeAndValueSums.metaMaskFeeInEth.plus(\n        quote.metaMaskFeeInEth,\n        10,\n      ),\n      ethValueOfTokens: feeAndValueSums.ethValueOfTokens.plus(\n        quote.ethValueOfTokens,\n        10,\n      ),\n    }),\n    {\n      ethFee: new BigNumber(0, 10),\n      metaMaskFeeInEth: new BigNumber(0, 10),\n      ethValueOfTokens: new BigNumber(0, 10),\n    },\n  );\n\n  return {\n    ethFee: feeAndValueSumsAsBigNumbers.ethFee\n      .div(quotes.length, 10)\n      .toString(10),\n    metaMaskFeeInEth: feeAndValueSumsAsBigNumbers.metaMaskFeeInEth\n      .div(quotes.length, 10)\n      .toString(10),\n    ethValueOfTokens: feeAndValueSumsAsBigNumbers.ethValueOfTokens\n      .div(quotes.length, 10)\n      .toString(10),\n  };\n}\n\nexport function calculateGasLimits(\n  approvalNeeded: boolean,\n  gasEstimateWithRefund: string | null,\n  gasEstimate: string | null,\n  averageGas: number,\n  maxGas: number,\n  gasMultiplier: number,\n  gasLimit: string | null,\n) {\n  let tradeGasLimit, tradeMaxGasLimit;\n  const customGasLimit = gasLimit && new BigNumber(gasLimit, 16);\n  if (\n    !approvalNeeded &&\n    gasEstimate &&\n    gasEstimateWithRefund &&\n    gasEstimateWithRefund !== '0'\n  ) {\n    tradeGasLimit = new BigNumber(gasEstimateWithRefund, 16);\n    tradeMaxGasLimit =\n      customGasLimit ||\n      new BigNumber(gasEstimate).times(gasMultiplier).integerValue();\n  } else {\n    tradeGasLimit = new BigNumber(averageGas || MAX_GAS_LIMIT, 10);\n    tradeMaxGasLimit =\n      customGasLimit || new BigNumber(maxGas || MAX_GAS_LIMIT, 10);\n  }\n  return { tradeGasLimit, tradeMaxGasLimit };\n}\n\nexport function calcTokenAmount(value: number | BigNumber, decimals: number) {\n  const multiplier = Math.pow(10, Number(decimals || 0));\n  return new BigNumber(value).div(multiplier);\n}\n\n/**\n * Estimates required gas for a given transaction\n *\n * @param transaction - Transaction object to estimate gas for\n * @returns - Promise resolving to an object containing gas and gasPrice\n */\nexport async function estimateGas(transaction: Transaction, ethQuery: any) {\n  const estimatedTransaction = { ...transaction };\n  const { value, data } = estimatedTransaction;\n  const { gasLimit } = await query(ethQuery, 'getBlockByNumber', [\n    'latest',\n    false,\n  ]);\n  estimatedTransaction.data = !data\n    ? data\n    : /* istanbul ignore next */ addHexPrefix(data);\n  // 3. If this is a contract address, safely estimate gas using RPC\n  estimatedTransaction.value =\n    typeof value === 'undefined' ? '0x0' : /* istanbul ignore next */ value;\n  const gasHex = await query(ethQuery, 'estimateGas', [estimatedTransaction]);\n  return { blockGasLimit: gasLimit, gas: addHexPrefix(gasHex) };\n}\n\n/**\n * Given the standard set of information about a transaction, returns a transaction properly formatted for\n * publishing via JSON RPC and web3\n *\n * @param {boolean} [sendToken] - Indicates whether or not the transaciton is a token transaction\n * @param {string} data - A hex string containing the data to include in the transaction\n * @param {string} to - A hex address of the tx recipient address\n * @param {string} amount - A hex amount, in case of a token tranaction will be set to Tx value\n * @param {string} from - A hex address of the tx sender address\n * @param {string} gas - A hex representation of the gas value for the transaction\n * @param {string} gasPrice - A hex representation of the gas price for the transaction\n * @returns {object} An object ready for submission to the blockchain, with all values appropriately hex prefixed\n */\nexport function constructTxParams({\n  sendToken,\n  data,\n  to,\n  amount,\n  from,\n  gas,\n  gasPrice,\n}: {\n  sendToken?: boolean;\n  data?: string;\n  to?: string;\n  from: string;\n  gas?: string;\n  gasPrice?: string;\n  amount?: string;\n}): any {\n  const txParams: Transaction = {\n    data,\n    from,\n    value: '0',\n    gas,\n    gasPrice,\n  };\n\n  if (!sendToken) {\n    txParams.value = amount;\n    txParams.to = to;\n  }\n  return normalizeTransaction(txParams);\n}\n"]}