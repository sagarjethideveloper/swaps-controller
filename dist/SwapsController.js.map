{"version":3,"file":"SwapsController.js","sourceRoot":"","sources":["../src/SwapsController.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  BaseController,\n  BaseConfig,\n  BaseState,\n  Transaction,\n  util,\n} from '@metamask/controllers';\nimport AbortController from 'abort-controller';\nimport BigNumber from 'bignumber.js';\nimport EthQuery from 'eth-query';\nimport abiERC20 from 'human-standard-token-abi';\nimport { Mutex } from 'async-mutex';\nimport Web3 from 'web3';\n\nimport {\n  calcTokenAmount,\n  calculateGasEstimateWithRefund,\n  calculateGasLimits,\n  estimateGas,\n  fetchAggregatorMetadata,\n  fetchGasPrices,\n  fetchTokens,\n  fetchTopAssets,\n  fetchTradesInfo,\n  getSwapsContractAddress,\n  SwapsError,\n  DEFAULT_ERC20_APPROVE_GAS,\n  NATIVE_SWAPS_TOKEN_ADDRESS,\n  ETH_CHAIN_ID,\n  BSC_CHAIN_ID,\n  SWAPS_TESTNET_CHAIN_ID,\n} from './swapsUtil';\n\nimport {\n  APIAggregatorMetadata,\n  APIFetchQuotesMetadata,\n  APIFetchQuotesParams,\n  ChainData,\n  ChainCache,\n  Quote,\n  QuoteSavings,\n  QuoteValues,\n  SwapsAsset,\n  SwapsToken,\n} from './swapsInterfaces';\n\nexport interface SwapsConfig extends BaseConfig {\n  clientId?: string;\n  maxGasLimit: number;\n  pollCountLimit: number;\n  fetchAggregatorMetadataThreshold: number;\n  fetchTokensThreshold: number;\n  fetchTopAssetsThreshold: number;\n  provider: any;\n  chainId: string;\n  supportedChainIds: string[];\n}\n\nexport interface SwapsState extends BaseState {\n  quotes: { [key: string]: Quote };\n  fetchParams: APIFetchQuotesParams;\n  fetchParamsMetaData: APIFetchQuotesMetadata;\n  topAggSavings: QuoteSavings | null;\n  quotesLastFetched: null | number;\n  error: { key: null | SwapsError; description: null | string };\n  topAggId: null | string;\n  isInPolling: boolean;\n  pollingCyclesLeft: number;\n  approvalTransaction: Transaction | null;\n  quoteValues: { [key: string]: QuoteValues } | null;\n  quoteRefreshSeconds: number | null;\n  usedGasPrice: string | null;\n  aggregatorMetadata: null | { [key: string]: APIAggregatorMetadata };\n  aggregatorMetadataLastFetched: number;\n  tokens: null | SwapsToken[];\n  tokensLastFetched: number;\n  topAssets: null | SwapsAsset[];\n  topAssetsLastFetched: number;\n  chainCache: ChainCache;\n}\n\ninterface SwapsNextState {\n  quotes: { [key: string]: Quote };\n  quotesLastFetched: null | number;\n  approvalTransaction: Transaction | null;\n  topAggId: null | string;\n  topAggSavings?: QuoteSavings | null;\n  quoteValues: { [key: string]: QuoteValues } | null;\n  quoteRefreshSeconds: number | null;\n}\n\nexport const INITIAL_CHAIN_DATA: ChainData = {\n  aggregatorMetadata: null,\n  tokens: null,\n  topAssets: null,\n  aggregatorMetadataLastFetched: 0,\n  topAssetsLastFetched: 0,\n  tokensLastFetched: 0,\n};\n\n/**\n * Gets a new chainCache for a chainId with updated data\n * @param chainCache Current chainCache from state\n * @param chainId Current chainId from the config\n * @param data Data to be updated\n * @returns chainCache with updated data\n */\nfunction getNewChainCache(\n  chainCache: ChainCache,\n  chainId: string,\n  data: Partial<ChainData>,\n): ChainCache {\n  return {\n    ...chainCache,\n    [chainId]: {\n      ...chainCache?.[chainId],\n      ...data,\n    },\n  };\n}\n\nexport class SwapsController extends BaseController<SwapsConfig, SwapsState> {\n  private handle?: NodeJS.Timer;\n\n  private web3: any;\n\n  private ethQuery: any;\n\n  private pollCount = 0;\n\n  private mutex = new Mutex();\n\n  private abortController?: AbortController;\n\n  /**\n   * Fetch current gas price\n   *\n   * @returns - Promise resolving to the current gas price or throw an error\n   */\n  private async getGasPrice(): Promise<string> {\n    try {\n      const { proposedGasPrice } = await fetchGasPrices(this.config.chainId);\n      return proposedGasPrice;\n    } catch (e) {\n      //\n    }\n    try {\n      const gasPrice = await util.query(this.ethQuery, 'gasPrice');\n      return gasPrice;\n    } catch (e) {\n      //\n    }\n    throw new Error(SwapsError.SWAPS_GAS_PRICE_ESTIMATION);\n  }\n\n  /**\n   * Calculates a quote `QuotesValue`\n   *\n   * @param quote - Specific quote object\n   * @param gasPrice - Gas price in hex format to calculate the `QuotesValue` with\n   */\n  private calculateQuoteValues(\n    quote: Quote,\n    gasPrice: string,\n    gasLimit: string | null,\n  ): QuoteValues {\n    const {\n      destinationTokenInfo,\n      destinationTokenConversionRate,\n    } = this.state.fetchParamsMetaData;\n    const {\n      aggregator,\n      averageGas,\n      maxGas,\n      destinationAmount = 0,\n      fee: metaMaskFee,\n      sourceAmount,\n      sourceToken,\n      trade,\n      gasEstimateWithRefund,\n      gasEstimate,\n      gasMultiplier,\n      approvalNeeded,\n    } = quote;\n\n    // trade gas\n    const { tradeGasLimit, tradeMaxGasLimit } = calculateGasLimits(\n      Boolean(approvalNeeded),\n      gasEstimateWithRefund,\n      gasEstimate,\n      averageGas,\n      maxGas,\n      gasMultiplier,\n      gasLimit,\n    );\n\n    const totalGasInWei = tradeGasLimit.times(gasPrice, 16);\n    const maxTotalGasInWei = tradeMaxGasLimit.times(gasPrice, 16);\n\n    // totalGas + trade value\n    // trade.value is a sum of different values depending on the transaction.\n    // It always includes any external fees charged by the quote source. In\n    // addition, if the source asset is NATIVE, trade.value includes the amount\n    // of swapped NATIVE.\n    const totalInWei = totalGasInWei.plus(trade.value, 16);\n    const maxTotalInWei = maxTotalGasInWei.plus(trade.value, 16);\n\n    // if value in trade, NATIVE fee will be the gas, if not it will be the total wei\n    const weiFee =\n      sourceToken === NATIVE_SWAPS_TOKEN_ADDRESS\n        ? totalInWei.minus(sourceAmount, 10)\n        : totalInWei; // sourceAmount is in wei : totalInWei;\n    const maxWeiFee =\n      sourceToken === NATIVE_SWAPS_TOKEN_ADDRESS\n        ? maxTotalInWei.minus(sourceAmount, 10)\n        : maxTotalInWei; // sourceAmount is in wei : totalInWei;\n    const ethFee = calcTokenAmount(weiFee, 18);\n    const maxEthFee = calcTokenAmount(maxWeiFee, 18);\n\n    const decimalAdjustedDestinationAmount = calcTokenAmount(\n      destinationAmount,\n      destinationTokenInfo.decimals,\n    );\n\n    // fees\n    const tokenPercentageOfPreFeeDestAmount = new BigNumber(100, 10)\n      .minus(metaMaskFee, 10)\n      .div(100);\n    const destinationAmountBeforeMetaMaskFee = decimalAdjustedDestinationAmount.div(\n      tokenPercentageOfPreFeeDestAmount,\n    );\n    const metaMaskFeeInTokens = destinationAmountBeforeMetaMaskFee.minus(\n      decimalAdjustedDestinationAmount,\n    );\n\n    const conversionRate = destinationTokenConversionRate || 1;\n\n    const ethValueOfTokens = decimalAdjustedDestinationAmount.times(\n      conversionRate,\n      10,\n    );\n\n    // the more tokens the better\n    const overallValueOfQuote = ethValueOfTokens.minus(ethFee, 10);\n\n    const quoteValues: QuoteValues = {\n      aggregator,\n      ethFee: ethFee.toFixed(18),\n      maxEthFee: maxEthFee.toFixed(18),\n      ethValueOfTokens: ethValueOfTokens.toFixed(18),\n      overallValueOfQuote: overallValueOfQuote.toFixed(18),\n      metaMaskFeeInEth: metaMaskFeeInTokens.times(conversionRate).toFixed(18),\n    };\n\n    return quoteValues;\n  }\n\n  private calculatesCustomLimitMaxEthFee(\n    quote: Quote,\n    gasPrice: string,\n    gasLimit: string,\n  ): string {\n    const {\n      averageGas,\n      maxGas,\n      sourceAmount,\n      sourceToken,\n      trade,\n      gasEstimateWithRefund,\n      gasEstimate,\n      gasMultiplier,\n      approvalNeeded,\n    } = quote;\n\n    const { tradeMaxGasLimit } = calculateGasLimits(\n      Boolean(approvalNeeded),\n      gasEstimateWithRefund,\n      gasEstimate,\n      averageGas,\n      maxGas,\n      gasMultiplier,\n      gasLimit,\n    );\n    const maxTotalGasInWei = tradeMaxGasLimit.times(gasPrice, 16);\n    const maxTotalInWei = maxTotalGasInWei.plus(trade.value, 16);\n    const maxWeiFee =\n      sourceToken === NATIVE_SWAPS_TOKEN_ADDRESS\n        ? maxTotalInWei.minus(sourceAmount, 10)\n        : maxTotalInWei;\n    const maxEthFee = calcTokenAmount(maxWeiFee, 18).toFixed(18);\n    return maxEthFee;\n  }\n\n  /**\n   * Find best quote and quotes calculated values\n   *\n   * @param quotes - Array of quotes\n   * @returns - Promise resolving to the best quote object and values from quotes\n   */\n  private getBestQuoteAndQuotesValues(\n    quotes: { [key: string]: Quote },\n    usedGasPrice: string,\n  ): { topAggId: string; quoteValues: { [key: string]: QuoteValues } } {\n    let topAggId = '';\n    let overallValueOfBestQuoteForSorting: BigNumber | null = null;\n\n    const quoteValues: { [key: string]: QuoteValues } = {};\n\n    Object.values(quotes).forEach((quote: Quote) => {\n      const quoteValue = this.calculateQuoteValues(quote, usedGasPrice, null);\n      quoteValues[quoteValue.aggregator] = quoteValue;\n\n      const bnOverallValueOfQuote = new BigNumber(\n        quoteValue.overallValueOfQuote,\n      );\n      if (\n        !overallValueOfBestQuoteForSorting ||\n        bnOverallValueOfQuote.gt(overallValueOfBestQuoteForSorting)\n      ) {\n        topAggId = quote.aggregator;\n        overallValueOfBestQuoteForSorting = bnOverallValueOfQuote;\n      }\n    });\n\n    return { topAggId, quoteValues };\n  }\n\n  /**\n   * Get current allowance for a wallet address to access ERC20 contract address funds\n   * it will throw after 10 secs\n   *\n   * @param contractAddress - Hex address of the ERC20 contract\n   * @param walletAddress - Hex address of the wallet\n   * @returns - Promise resolving to allowance number\n   */\n  private async getERC20Allowance(\n    contractAddress: string,\n    walletAddress: string,\n  ): Promise<number> {\n    const contract = this.web3.eth.contract(abiERC20).at(contractAddress);\n    const allowanceTimeout = new Promise<number>((_, reject) => {\n      setTimeout(() => {\n        reject(new Error(SwapsError.SWAPS_ALLOWANCE_TIMEOUT));\n      }, 10000);\n    });\n\n    const allowancePromise = new Promise<number>((resolve, reject) => {\n      contract.allowance(\n        walletAddress,\n        getSwapsContractAddress(this.config.chainId),\n        (error: Error, result: number) => {\n          /* istanbul ignore if */\n          if (error) {\n            reject(error);\n            return;\n          }\n          resolve(result);\n        },\n      );\n    });\n\n    return Promise.race([\n      allowanceTimeout,\n      allowancePromise,\n    ]) as Promise<number>;\n  }\n\n  private timedoutGasReturn(\n    tradeTxParams: Transaction | null,\n  ): Promise<{ gas: string | null }> {\n    if (!tradeTxParams) {\n      return new Promise((resolve) => {\n        resolve({ gas: null });\n      });\n    }\n\n    const gasTimeout = new Promise((resolve) => {\n      setTimeout(() => {\n        resolve({ gas: null });\n      }, 5000);\n    });\n\n    return new Promise(async (resolve) => {\n      const tradeTxParamsForGasEstimate = {\n        data: tradeTxParams.data,\n        from: tradeTxParams.from,\n        to: tradeTxParams.to,\n        value: tradeTxParams.value,\n      };\n      try {\n        const gas: { gas: string | null } = (await Promise.race([\n          estimateGas(tradeTxParamsForGasEstimate, this.ethQuery),\n          gasTimeout,\n        ])) as { gas: string | null };\n        resolve(gas);\n      } catch (e) {\n        resolve({ gas: null });\n      }\n    });\n  }\n\n  private async pollForNewQuotesWithThreshold(fetchThreshold = 0) {\n    this.pollCount += 1;\n    this.handle && clearTimeout(this.handle);\n    if (this.pollCount < this.config.pollCountLimit + 1) {\n      !this.state.isInPolling && this.update({ isInPolling: true });\n      const {\n        nextQuotesState,\n        threshold,\n        usedGasPrice,\n      } = await this.fetchQuotes();\n      this.update({\n        pollingCyclesLeft: this.config.pollCountLimit - this.pollCount,\n      });\n      if (threshold && nextQuotesState?.quoteRefreshSeconds) {\n        this.update({ ...this.state, ...nextQuotesState, usedGasPrice });\n        this.handle = setTimeout(async () => {\n          this.pollForNewQuotesWithThreshold(threshold);\n        }, nextQuotesState.quoteRefreshSeconds * 1000 - threshold);\n      }\n    } else {\n      this.handle = setTimeout(() => {\n        this.stopPollingAndResetState({\n          key: SwapsError.QUOTES_EXPIRED_ERROR,\n          description: null,\n        });\n      }, fetchThreshold);\n    }\n  }\n\n  private async getAllQuotesWithGasEstimates(trades: {\n    [key: string]: Quote;\n  }): Promise<{ [key: string]: Quote }> {\n    const quoteGasData = await Promise.all(\n      Object.values(trades).map((trade) => {\n        return new Promise<{ gas: string | null; aggId: string }>(\n          async (resolve, reject) => {\n            try {\n              const { gas } = await this.timedoutGasReturn(trade.trade);\n              resolve({\n                gas,\n                aggId: trade.aggregator,\n              });\n            } catch (e) {\n              reject(e);\n            }\n          },\n        );\n      }),\n    );\n\n    const newQuotes: { [key: string]: Quote } = {};\n    quoteGasData.forEach(({ gas, aggId }) => {\n      newQuotes[aggId] = {\n        ...trades[aggId],\n        gasEstimate: gas,\n        gasEstimateWithRefund: calculateGasEstimateWithRefund(\n          trades[aggId].maxGas,\n          trades[aggId].estimatedRefund,\n          gas,\n        ).toString(16),\n      };\n    });\n    return newQuotes;\n  }\n\n  private async fetchQuotes(): Promise<{\n    nextQuotesState: SwapsNextState | null;\n    threshold: number | null;\n    usedGasPrice: string | null;\n  }> {\n    const timeStarted = Date.now();\n    const { fetchParams } = this.state;\n    const { clientId, chainId } = this.config;\n    try {\n      /** We need to abort quotes fetch if stopPollingAndResetState is called while getting quotes */\n      this.abortController = new AbortController();\n      const { signal } = this.abortController;\n      let quotes: { [key: string]: Quote } = await fetchTradesInfo(\n        fetchParams,\n        signal,\n        chainId,\n        clientId,\n      );\n\n      if (Object.values(quotes).length === 0) {\n        throw new Error(SwapsError.QUOTES_NOT_AVAILABLE_ERROR);\n      }\n\n      let approvalTransaction: {\n        data?: string;\n        from: string;\n        to?: string;\n        gas?: string;\n      } | null = null;\n\n      if (fetchParams.sourceToken !== NATIVE_SWAPS_TOKEN_ADDRESS) {\n        const allowance = await this.getERC20Allowance(\n          fetchParams.sourceToken,\n          fetchParams.walletAddress,\n        );\n\n        if (Number(allowance) < fetchParams.sourceAmount) {\n          approvalTransaction = Object.values(quotes)[0].approvalNeeded;\n          if (!approvalTransaction) {\n            throw new Error(SwapsError.SWAPS_ALLOWANCE_ERROR);\n          }\n          const { gas: approvalGas } = await this.timedoutGasReturn({\n            data: approvalTransaction.data,\n            from: approvalTransaction.from,\n            to: approvalTransaction.to,\n          });\n\n          approvalTransaction = {\n            ...approvalTransaction,\n            gas: approvalGas || DEFAULT_ERC20_APPROVE_GAS,\n          };\n        }\n      }\n      quotes = await this.getAllQuotesWithGasEstimates(quotes);\n      const usedGasPrice = await this.getGasPrice();\n\n      const { topAggId, quoteValues } = this.getBestQuoteAndQuotesValues(\n        quotes,\n        usedGasPrice,\n      );\n\n      const quotesLastFetched = Date.now();\n\n      const nextQuotesState: SwapsNextState = {\n        quotes,\n        quotesLastFetched,\n        approvalTransaction,\n        topAggId: quotes[topAggId]?.aggregator,\n        quoteValues,\n        quoteRefreshSeconds: quotes[topAggId]?.quoteRefreshSeconds,\n      };\n      return {\n        nextQuotesState,\n        threshold: quotesLastFetched - timeStarted,\n        usedGasPrice,\n      };\n    } catch (e) {\n      const errorKey = Object.values(SwapsError).includes(e.message)\n        ? e.message\n        : SwapsError.ERROR_FETCHING_QUOTES;\n      this.stopPollingAndResetState({ key: errorKey, description: e });\n      return { nextQuotesState: null, threshold: null, usedGasPrice: null };\n    }\n  }\n\n  /**\n   * Name of this controller used during composition\n   */\n  name = 'SwapsController';\n\n  /**\n   * List of required sibling controllers this controller needs to function\n   */\n  requiredControllers = [];\n\n  /**\n   * Creates a SwapsController instance\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */\n  constructor(config?: Partial<SwapsConfig>, state?: Partial<SwapsState>) {\n    super(config, state);\n    this.defaultConfig = {\n      maxGasLimit: 2500000,\n      pollCountLimit: 3,\n      fetchAggregatorMetadataThreshold: 1000 * 60 * 60 * 24 * 15,\n      fetchTokensThreshold: 1000 * 60 * 60 * 24,\n      fetchTopAssetsThreshold: 1000 * 60 * 30,\n      provider: undefined,\n      chainId: '1',\n      supportedChainIds: [ETH_CHAIN_ID, BSC_CHAIN_ID, SWAPS_TESTNET_CHAIN_ID],\n      clientId: undefined,\n    };\n    this.defaultState = {\n      quotes: {},\n      quoteValues: {},\n      fetchParams: {\n        slippage: 0,\n        sourceToken: '',\n        sourceAmount: 0,\n        destinationToken: '',\n        walletAddress: '',\n      },\n      fetchParamsMetaData: {\n        sourceTokenInfo: {\n          decimals: 0,\n          address: '',\n          symbol: '',\n        },\n        destinationTokenInfo: {\n          decimals: 0,\n          address: '',\n          symbol: '',\n        },\n        accountBalance: '0x',\n      },\n      topAggSavings: null,\n      aggregatorMetadata: null,\n      tokens: null,\n      topAssets: null,\n      approvalTransaction: null,\n      aggregatorMetadataLastFetched: 0,\n      quotesLastFetched: 0,\n      topAssetsLastFetched: 0,\n      error: { key: null, description: null },\n      topAggId: null,\n      tokensLastFetched: 0,\n      isInPolling: false,\n      pollingCyclesLeft: config?.pollCountLimit || 3,\n      quoteRefreshSeconds: null,\n      usedGasPrice: null,\n      chainCache: {\n        '1': INITIAL_CHAIN_DATA,\n      },\n    };\n\n    this.initialize();\n  }\n\n  set provider(provider: any) {\n    if (provider) {\n      this.ethQuery = new EthQuery(provider);\n      this.web3 = new Web3(provider);\n    }\n  }\n\n  set chainId(chainId: string) {\n    if (!this.config.supportedChainIds.includes(chainId)) {\n      return;\n    }\n\n    const { chainCache } = this.state;\n    if (chainCache?.[chainId] === undefined) {\n      this.update({\n        ...INITIAL_CHAIN_DATA,\n        chainCache: getNewChainCache(chainCache, chainId, INITIAL_CHAIN_DATA),\n      });\n      return;\n    }\n\n    const cachedData = chainCache?.[chainId] || INITIAL_CHAIN_DATA;\n    this.update({\n      ...cachedData,\n    });\n  }\n\n  /**\n   * Updates all quotes with a new custom gas price\n   *\n   * @param customGasPrice - Custom gas price in hex format\n   */\n  updateQuotesWithGasPrice(customGasPrice: string): void {\n    const { quotes } = this.state;\n    const { topAggId, quoteValues } = this.getBestQuoteAndQuotesValues(\n      quotes,\n      customGasPrice,\n    );\n    this.update({ topAggId, quoteValues });\n  }\n\n  /**\n   * Updates the selected quote maxEthFee param according to a custom gas limit\n   *\n   * @param customGasLimit - Custom gas limit in hex format\n   */\n  updateSelectedQuoteWithGasLimit(customGasLimit: string): void {\n    const { topAggId, quotes, quoteValues, usedGasPrice } = this.state;\n    if (!topAggId || !quoteValues || !usedGasPrice) {\n      return;\n    }\n    const selectedQuote = quotes[topAggId];\n    const maxEthFee = this.calculatesCustomLimitMaxEthFee(\n      selectedQuote,\n      usedGasPrice,\n      customGasLimit,\n    );\n    quoteValues[selectedQuote.aggregator].maxEthFee = maxEthFee;\n    this.update({ topAggId, quoteValues });\n  }\n\n  startFetchAndSetQuotes(\n    fetchParams: APIFetchQuotesParams,\n    fetchParamsMetaData: APIFetchQuotesMetadata,\n  ) {\n    if (!fetchParams) {\n      return null;\n    }\n\n    // Every time we get a new request that is not from the polling,\n    // we reset the poll count so we can poll for up to three more sets\n    // of quotes with these new params.\n    this.pollCount = 0;\n\n    this.update({ fetchParams, fetchParamsMetaData });\n    this.pollForNewQuotesWithThreshold();\n  }\n\n  async fetchTokenWithCache() {\n    const { chainId, fetchTokensThreshold } = this.config;\n    const { tokens, tokensLastFetched } = this.state;\n\n    if (!tokens || fetchTokensThreshold < Date.now() - tokensLastFetched) {\n      const releaseLock = await this.mutex.acquire();\n      try {\n        const newTokens = await fetchTokens(chainId);\n        const data = { tokens: newTokens, tokensLastFetched: Date.now() };\n        this.update({\n          ...data,\n          chainCache: getNewChainCache(this.state.chainCache, chainId, data),\n        });\n      } catch {\n        const data = { tokensLastFetched: 0 };\n        this.update({\n          ...data,\n          chainCache: getNewChainCache(this.state.chainCache, chainId, data),\n        });\n      } finally {\n        releaseLock();\n      }\n    }\n  }\n\n  async fetchTopAssetsWithCache() {\n    const { chainId, fetchTopAssetsThreshold } = this.config;\n    const { topAssets, topAssetsLastFetched } = this.state;\n\n    if (\n      !topAssets ||\n      fetchTopAssetsThreshold < Date.now() - topAssetsLastFetched\n    ) {\n      const releaseLock = await this.mutex.acquire();\n      try {\n        const newTopAssets = await fetchTopAssets(chainId);\n        const data = {\n          topAssets: newTopAssets,\n          topAssetsLastFetched: Date.now(),\n        };\n        this.update({\n          ...data,\n          chainCache: getNewChainCache(this.state.chainCache, chainId, data),\n        });\n      } catch {\n        const data = { topAssetsLastFetched: 0 };\n        this.update({\n          ...data,\n          chainCache: getNewChainCache(this.state.chainCache, chainId, data),\n        });\n      } finally {\n        releaseLock();\n      }\n    }\n  }\n\n  async fetchAggregatorMetadataWithCache() {\n    const { chainId, fetchAggregatorMetadataThreshold } = this.config;\n    const { aggregatorMetadata, aggregatorMetadataLastFetched } = this.state;\n\n    if (\n      !aggregatorMetadata ||\n      fetchAggregatorMetadataThreshold <\n        Date.now() - aggregatorMetadataLastFetched\n    ) {\n      const releaseLock = await this.mutex.acquire();\n      try {\n        const newAggregatorMetada = await fetchAggregatorMetadata(chainId);\n        const data = {\n          aggregatorMetadata: newAggregatorMetada,\n          aggregatorMetadataLastFetched: Date.now(),\n        };\n        this.update({\n          ...data,\n          chainCache: getNewChainCache(this.state.chainCache, chainId, data),\n        });\n      } catch {\n        const data = { aggregatorMetadataLastFetched: 0 };\n        this.update({\n          ...data,\n          chainCache: getNewChainCache(this.state.chainCache, chainId, data),\n        });\n      } finally {\n        releaseLock();\n      }\n    }\n  }\n\n  /**\n   * Stops the polling process\n   *\n   */\n  stopPollingAndResetState(error?: {\n    key: SwapsError | null;\n    description: string | null;\n  }) {\n    this.abortController && this.abortController.abort();\n    this.handle && clearTimeout(this.handle);\n    this.pollCount = this.config.pollCountLimit + 1;\n    this.update({\n      ...this.defaultState,\n      isInPolling: false,\n      tokensLastFetched: this.state.tokensLastFetched,\n      topAssetsLastFetched: this.state.topAssetsLastFetched,\n      aggregatorMetadataLastFetched: this.state.aggregatorMetadataLastFetched,\n      tokens: this.state.tokens,\n      topAssets: this.state.topAssets,\n      aggregatorMetadata: this.state.aggregatorMetadata,\n      chainCache: this.state.chainCache,\n      error,\n    });\n  }\n}\n\nexport default SwapsController;\n"]}